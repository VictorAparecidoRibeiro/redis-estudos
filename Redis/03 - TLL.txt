# O Comando TTL (Time to live) no Redis é usado para gerenciar a expiração de chaves.

# Quando uma chave tem um TTL definido, ela será automaticamente removida do banco de dados após
o período especificado.

# Útil para gerenciar dados temporários, cache, sessões de usuário e muito mais.

#Exemplos práticos de uso:

 - Cache de Respostas de API
 
 Imagine que você está fazendo chamadas para uma APi externa e quer armazenar as repostas em cache para reduzier
 a carga e o tempo de respostas:
 
  - Armazena a resposta da API em cache 
  FLUSHALL
  SET api_response:users "{'users:'['Bruce', 'Clark']}"
  GET api_response:users 
  
 # Define um TTL de 60 segundos para a chave, com isso a resposta da API será armazenada por 60 segundos.
 Se a mesma requisição for feita novamente dentro desse tempo, a resposta em cache será usada, economizando tempo 
 e recursos.
 
 EXPIRE api_response:users 60
 TTL api_response:users 
 
 # Ao rodar novamente, "RESETA" o TTL:
 
 EXPIRE api_response:users 10
 TTL api_response:users
 
 # Checar se a chave foi removida após o TTL acabar
 GET api_response:users
 
 
 # Gerenciamento de sessões de usuário
 - Para aplicativos que requerem autenticação, é comum usar o TTL para gerenciar sessões de usuário,
 garantindo que as sessões expiradas sejam removidas automaticamente.
 
 # Armazena a sessão do usuário com um TTL de 30 minutos (1800 segundos)
 SET session:user1234 "session_data"
 
 # Define um TTL de 1800 segundos (30 minutos) para a chave. Se um usuário estiver inativo por 30 minutos
 sua sessão será automaticamente removida 
 
 EXPIRE session:user1234 1800
 TTL session:user1234
 
 EXPIRE session:user1234 10
 TTL session:user1234
 
 # Limite de Taxa (Rate Limiting)
 
 O TTL pode ser usado para implementar um sistema de rate limiting, onde você deseja limitar o número de 
 requisições que um usuário pode fazer em um determinado período:
 
 SET requests:user1234 1
 GET requests:user1234 
 
 # Incrementa o contador de requisições do usuário
 
 GET requests:user1234
 INCR requests:user1234
 GET requests:user1234
 
 # Define um TTL de 60 segundos para o contador. Se o valor do contador exceder um determinado limite
 você pode bloquear ou limitar temporariamente o usuário até que o TTL expire.
 
 EXPIRE requests:user1234 10
 TTL requests:user1234
 GET requests:user1234
 
 #Dados temporários 
 
 - Em situações onde você precisa armazenar dados temporários, como códigos de verificações ou OTPs
 (One-Time Passwords) o TTL é essencial.
 
 # Armazena um código de verificação com um TTL de 5 minutos 
 
 SET verification_code:user1234 "123456"
 GET verification_code:user1234
 
 # Define um TTL de 300 segundos (5 minutos) para a chave, após 5 minutos o código de verificação será automaticamente
 removido, garantindo que ele só possa ser usado dentro desse período.
 
 EXPIRE verification_code:user1234 300
 RRL verification_code:user1234
 
 
 # Paginação de resultados
 
 Se você está usando Redis para armazenar resultados de buscas paginados, pode definir um TTl para garantir que os dados sejam removidos após um certo tempo 
 
 # Armazena uma pagina de resultados de busca 
 
 SET search_results:page1 "{'results': ['1','2']}"
 GET search_results:page1
 
 # Define um TTL de 600 segundos (10 minutos) para a chave, isso garante que os resultados de busca não
 sejam mantidos por tempo indeterminado, economizando espaço de armazenamento.
 
  EXPIRE search_results:page 1 600
  TTL search_results:page1